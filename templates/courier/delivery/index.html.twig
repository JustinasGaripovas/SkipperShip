{% extends 'base.html.twig' %}

{% block title %}Delivery index{% endblock %}

{% block content %}

    <div class="page-header">
        <h2><i class="fas fa-dolly fa-fw"></i>Courier deliveries </h2>
        <div class="controls-container">
        </div>
    </div>

<table class="table">
    <thead>
    <tr>
        <th>ID</th>
        <th>Label</th>
        <th>Status</th>
        <th>CreatedAt</th>
        <th>UpdatedAt</th>
        <th>Weight</th>
        <th>RecipientInformation</th>
        <th>actions</th>
    </tr>
    </thead>
    <tbody>
    {% for delivery in pagination %}
    <tr onClick="setMapView({{delivery.recipientLat}},{{delivery.recipientLng}})"   >
        <td>{{ delivery.id }}</td>
        <td>{{ delivery.label }}</td>
        <td>{{ delivery.status }}</td>
        <td>{{ delivery.createdAt ? delivery.createdAt|date('Y-m-d H:i:s') : '' }}</td>
        <td>{{ delivery.updatedAt ? delivery.updatedAt|date('Y-m-d H:i:s') : '' }}</td>
        <td>{{ delivery.weight }}</td>
        <td>{{ delivery.recipientInformation }}</td>
        <td>
            <a href="{{ path('delivery_show', {'id': delivery.id}) }}">show</a>
            <a href="{{ path('courier_delivery_cancel', {'id_courier': courier.id, 'id_delivery': delivery.id}) }}">cancel</a>
            <a href="{{ path('courier_delivery_delivered', {'id_courier': courier.id, 'id_delivery': delivery.id}) }}">delivered</a>
        </td>
    </tr>
    {% else %}
    <tr>
        <td colspan="9">no records found</td>
    </tr>
    {% endfor %}
    </tbody>
</table>

<div style="display:flex;justify-content:center;align-items:center;">
    <div>
        {{ knp_pagination_render(pagination) }}
    </div>
</div>

<a href="{{ path('delivery_new') }}">Create new</a>
{% endblock %}




{% block sideContent %}
    <div class="map" id="main-map"></div>
    <script src="/leaflet-routing-machine.min.js"></script>

    <script type="text/javascript">

        let myCurrentLocation;
        function initGeolocation()
        {
            if( navigator.geolocation )
            {
                // Call getCurrentPosition with success and failure callbacks
                navigator.geolocation.getCurrentPosition( success, fail );
            }
            else
            {
                alert("Sorry, your browser does not support geolocation services.");
            }
        }

        function success(position)
        {
            console.log(position.coords)
            myCurrentLocation = position.coords;
        }

        function fail()
        {
            console.log("failed")
            // Could not obtain location
        }
        document.addEventListener("DOMContentLoaded", initGeolocation);

    </script>

    <script>
        const map = L.map("main-map").setView([54.897581, 23.909723], 13);


        const icon = L.icon({
            iconUrl: '/icons/svgs/solid/box.svg',
            shadowUrl: '/icons/svgs/solid/box.svg',

            iconSize: [30, 30], // size of the icon
        });



        {% for delivery in pagination %}
        L.marker([{{ delivery.recipientLat }},{{ delivery.recipientLng }}], {icon: icon}).addTo(map);

        {% endfor %}



        L.tileLayer(
            "https://api.maptiler.com/maps/basic/{z}/{x}/{y}.png?key=ltrALA6k9d2bkEeRn8Fn",
            {
                attribution:
                    '<a href="https://www.maptiler.com/copyright/" target="_blank">© MapTiler</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">© OpenStreetMap contributors</a>'
            }
        ).addTo(map);

        const setMapView = (lat, long) => {
            console.log(myCurrentLocation)
            L.Routing.control({
                waypoints: [
                    L.latLng(myCurrentLocation.latitude, myCurrentLocation.longitude),
                    L.latLng(lat, long)
                ],
                createMarker: () => {},
                routeWhileDragging: true
            }).addTo(map);

            map.setView([lat, long], 15);
        };

        // L.Routing.control({
        //     waypoints: [
        //         L.latLng(54.897581, 23.909724),
        //         L.latLng(54.897581, 23.919724)
        //     ],
        //     createMarker: () => marker,
        //     routeWhileDragging: true
        // }).addTo(map);

    </script>
{% endblock %}
